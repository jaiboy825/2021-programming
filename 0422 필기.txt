빌드 : 어플리케이션을 실행 가능한 상태로 변환하는 과정

컴파일 언어
장점 : 바로 기계어로 변환되어 속도가 빠르고 보안에 유리하다
단점 : 빌드 수행 과정 시간이 오래 걸린다 

pp ta ll

preprocessor
parser
transition
assembrer
linker 
loader



컴파일러 -> (byte code) -> byte code verifier -> class code -> just in time compiler 




인터프리터 언어 
컴파일 언어와 다르게 한줄씩 번역 되며 메모리 사용이 적고 빠르다

애플리케이션 배포
개발자 또는 사용자가 실제로 사용하기 위해서 여러가지 리소스 들을 적합한 위치로 이동

http 요청을 받아 : 웹 서버
사용자 요청을 받아 동적인 처리를 수행 : was
java라이브러리 : jar
jar 과 war 를 묶어 : ear

형상관리 시스템 : baseline 설정

형상관리 3가지 : 신규 프로젝트 및 보완 개발, 기존 시스템 유지 관리, 사용자 파일 관리

형상관리 : 계획부터 폐기까지의 모든 활동

형상항목 : 형상관리의 대상이 되는 모든 항목

기준선 : 형상항목의 집합체

마이그레이션 : 이관시키는 작업
리포지터리 : 저장 관리하는 저장공간
워크플로 : 미리 정해진 절차가 형상관리 시스템 안에 있는것
반출 : 리포지터리부터 전송 받는것




빌드 : 어플리케이션을 실행 할 수 있는 상태로 변환하는 과정을 말한다
컴파일 언어 장 : 기계어로 바로 변환되어 속도가 빠르고 보안에 유리하다
단 : 빌드하는 과정이 오래걸린다
6개 : Preprocessor, parser, assembrer, linker, transition, loader
5개 : compiler - > byte code verifier -> class loader -> just in time compiler ******
인터프리터 언어 : 컴파일 언어와 다르게 바로 한줄씩 번역이 되며 메모리를 덜 사용, 속도가 빠르다
애플리케이션 배포 : 개발자 또는 사용자가 어플리케이션을 이용하기 위해서 리소스 파일 등을 적합한 위치로 이동 시키는 것
웹 서버 : http 요청을 받아 처리
was : 사용자 요청을 받아 처리
jar : java 라이브러리 뭐시기
ear : jar 과 war 모두 함께
형상관리 시스템 : 기준선 설정하고 일관성과 추적성을 확보하기 위한 시스템
형상 항목 : 형상관리 대상이 되는 모든 것들
형상관리 : 계획 부터 폐기 까지 발생하는 모든 활동을 의미한다
형상 관리 범위 3가지 : 사용자 파일관리, 신규 프로젝트 및 보완 개발, 시스템 운영/ 유지보수
기준선 : 형상 항목의 집합체
마이그레이션 : 이관시키는 작업
리포지터리 : 저장 관리를 하는 저장 공간
워크플로 : 미리 정해진 절차가 형상관리 시스템 안에 포함되어있는것
반출 : 리포지터리로부터 전송 받는것을 뜻함

preprocessor

어플리케이션 배포 계획 수립 시 어플리케이션의 개발 언어와 관련된 확인 사항
어플리케이션의 개발 언어의 버전을 확인하고, 해당 언어의 컴파일과 배포 방식을 확인한다.

애플리케이션 배포 계획 수립 시 프로젝트에 적용되어 있는 개발 도구, 개발 환경과 관련된 확인 사항
프로젝트에 사용되는 개발 도구를 확인 하고, 개발 프레임 워크를 확인하고, "프로그램 관리, 컴파일 방식"을 확인한다.

애플리케이션의 유형과 관련된 확인사항
애플리케이션의 유형을 확인한다. 해당 유형에 맞는 배포 방식을 확인한다

배포 관리자의 역할과 책임
빌드,배포환경 구성 및 운영 빌드 스크립트 작성 및 테스트

pm pl의 역할 과 책임
빌드, 배포 보고서 확인, 개발 진척도 관리

개발자의 역할과 책임
테스트 케이스 작성 및 관리, 개별 모듈 수시 빌드 및 배포

정적 테스트 사용 목적
코딩 오류, 성능저하, 보안 취약점 등의 결함을 조기에 발견 할 수 있도록 지원

동적 테스트 사용 목적
안전성 제고, 정량적인 품질 관리 시스템을 구축

코드 인스펙션 rule 유형중 성능 개선
성능에 영향을 미칠 수 있는 코드를 점검

코드 인스펙션 rule 유형중 에러 발생 가능성
에러 발생 가능한 코드를 점검

코드 인스펙션 
정적 테스트의 가장 일반적인 유형, 작성 규칙에 위반하는 소스코드 추출

코드 작성 규칙 
개발 언어에서 사전에 정의 된 작성 규칙 또는 프로젝트 내에서 정의 된 작성 규칙 수행 여부를 점검하는 rule 이다

테스트 프레임워크 
별도의 테스트 코드로 작성하고 동작시킬 수 있는 환경을 제공하는 도구

테스트 코드
테스트 코드 작성 및 자동화된 운영환경을 구성한다


테스트 저장소 
테스트 수행을 위한 것들을 저장, 관리

테스트 커버리지
전체 프로그램의 범위 대비 테스트에 사용된 범위 비율 의미

분기 커버리지
개발소스의 각 분기문이 수행되었는지를 확인하는 측정지표 이다.

조건 커버리지
각 분기문 내에 존재하는 조건문이 모두 테스트 되었는지 확인하는 측정지표이다.

빌드 작업 스케쥴링
빌드 작업의 작업주기, 작업 시간을 결정한다.

빌드 스케쥴 관리 도구
별도의 웹 애플리케이션을 구성되어 웹서버상에 배포되고, 빌드 수행 결과를 제공한다

빌드 수행 결과 리포팅
빌드 수행 결과 오류 사항 코드 인스펙션 점검 결과 테스트 수행 결과 등을 웹 화면을 통해서 보여주고, 관련자들이 공유할 수 있도록 리포팅을 제공한다
